"""Initial migration

Revision ID: 707662ffd955
Revises: 
Create Date: 2024-07-10 18:51:32.246820

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '707662ffd955'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop the foreign key constraint
    op.drop_constraint('transaction_item_sku_fkey', 'transaction', type_='foreignkey')
    op.drop_constraint('transaction_c_id_fkey', 'transaction', type_='foreignkey')
    op.drop_constraint('transaction_s_id_fkey', 'transaction', type_='foreignkey')
    
    # Drop the tables with CASCADE
    op.drop_index('idx_item_sku', table_name='inventoryitem')
    op.drop_table('inventoryitem')
    op.drop_table('transaction')
    
    # Add new columns to the customer table
    op.add_column('customer', sa.Column('c_password', sa.String(length=128), nullable=False))
    op.add_column('customer', sa.Column('c_role', sa.String(length=50), nullable=False))
    op.add_column('customer', sa.Column('c_status', sa.String(length=20), nullable=True))
    
    # Drop and recreate unique constraints
    op.drop_index('idx_customer_email', table_name='customer')
    op.create_unique_constraint(None, 'customer', ['c_email'])
    op.alter_column('staff', 's_password',
                    existing_type=sa.TEXT(),
                    type_=sa.String(length=128),
                    existing_nullable=False)
    op.create_unique_constraint(None, 'staff', ['s_email'])
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop unique constraints
    op.drop_constraint(None, 'staff', type_='unique')
    op.alter_column('staff', 's_password',
                    existing_type=sa.String(length=128),
                    type_=sa.TEXT(),
                    existing_nullable=False)
    op.drop_constraint(None, 'customer', type_='unique')
    op.create_index('idx_customer_email', 'customer', ['c_email'], unique=False)
    
    # Drop added columns
    op.drop_column('customer', 'c_status')
    op.drop_column('customer', 'c_role')
    op.drop_column('customer', 'c_password')
    
    # Recreate the inventoryitem table
    op.create_table('inventoryitem',
                    sa.Column('item_sku', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('item_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
                    sa.Column('item_description', sa.TEXT(), autoincrement=False, nullable=True),
                    sa.Column('item_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
                    sa.Column('item_qty', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.PrimaryKeyConstraint('item_sku', name='inventoryitem_pkey')
                    )
    op.create_index('idx_item_sku', 'inventoryitem', ['item_sku'], unique=False)
    
    # Recreate the transaction table
    op.create_table('transaction',
                    sa.Column('t_id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('c_id', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('s_id', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('item_sku', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('t_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
                    sa.Column('t_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
                    sa.Column('t_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['c_id'], ['customer.c_id'], name='transaction_c_id_fkey'),
                    sa.ForeignKeyConstraint(['item_sku'], ['inventoryitem.item_sku'], name='transaction_item_sku_fkey'),
                    sa.ForeignKeyConstraint(['s_id'], ['staff.s_id'], name='transaction_s_id_fkey'),
                    sa.PrimaryKeyConstraint('t_id', name='transaction_pkey')
                    )
    # Recreate the foreign key constraints
    op.create_foreign_key('transaction_item_sku_fkey', 'transaction', 'inventoryitem', ['item_sku'], ['item_sku'])
    op.create_foreign_key('transaction_c_id_fkey', 'transaction', 'customer', ['c_id'], ['c_id'])
    op.create_foreign_key('transaction_s_id_fkey', 'transaction', 'staff', ['s_id'], ['s_id'])
    
    # ### end Alembic commands ###